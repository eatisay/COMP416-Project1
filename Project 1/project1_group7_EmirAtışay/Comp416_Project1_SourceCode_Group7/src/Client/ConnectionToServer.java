	package Client;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;


public class ConnectionToServer
{
    public static final String DEFAULT_SERVER_ADDRESS = "localhost";
    public static final int DEFAULT_SERVER_PORT = 4444;

    private Socket s;
    protected BufferedReader is;
    protected PrintWriter os;

    protected String serverAddress;
    protected int serverPort;
    protected Random rand = new Random();

    protected ArrayList deck;
    protected String name;

    /**
     * This is constructor for the ConnectionToServer.
     * @param address takes the address desired connectio
     * @param port takes the port that the client wanted to plug in
     */
    public ConnectionToServer(String address, int port)
    {
        serverAddress = address;
        serverPort    = port;
    }

    /**
     * Socket that is generated by the address and port is observed and the streams are initialized
     * through that socket.
     */
    public void Connect()
    {
        try
        {
            s=new Socket(serverAddress, serverPort);
            is = new BufferedReader(new InputStreamReader(s.getInputStream()));
            os = new PrintWriter(s.getOutputStream());
            System.out.println("Successfully connected to " + serverAddress + " on port " + serverPort);
        }
        catch (IOException e)
        {
            System.err.println("Error: no server has been found on " + serverAddress + "/" + serverPort);
        }
    }
	
	 /**
     * According to the received message from the master, the client generates its answer in a logical manner, such as the payloads
     * or game commands they are all selected according to if conditions
     * @param message the string which is sent to the client by the server
     * @return String array which holds the payload and the response of the client to the server
     */

    public String[] SendForAnswer(String message)
    {
        String[] response = new String[2];
        try
        {
            int randInt = rand.nextInt(deck.size());
            switch (message){
                case("1"):
                    message="2-"+ (String) deck.remove(randInt); break;
                case("2"):
                    message="4- "; break;//ready for new game
                case("3"): message= "100- "; break;
                case("QUIT"): message= "100- "; break;
                default:
                    response[0]="Incorrect desire";
                    return response;
            }
            os.println(message);
            os.flush();
            response=is.readLine().split("-");
            switch (response[1]){
                case("0"): response[1]="win";break;
                case("1"): response[1]="draw";break;
                case("2"): response[1]="lose";break;
            }
            if (this.deck.isEmpty()){
                response=is.readLine().split("-");
                switch (response[0]){
                    case("3"):
                        switch (response[1]){
                            case("0"): response[1]="win";break;
                            case("1"): response[1]="draw";break;
                            case("2"): response[1]="lose";break;
                        }
                    case("4"): response[1]="draw";break;
                }
                System.out.println("Response from server: "+response[1]);
                response=is.readLine().split("-");
                switch (response[0]){
                    case("3"):
                    case("4"):
                        switch (response[1]){
                            case("0"): response[1]="You won the game";break;
                            case("1"): response[1]="It is a draw";break;
                            case("2"): response[1]="You lost the game";break;
                        }
                        break;
                }System.out.println("Final Result: "+response[1]);
            }
        }
        catch(IOException e)
        {
            e.printStackTrace();
            System.out.println("ConnectionToServer. Socket read Error");
        }

        return response;
    }
	
	 /**
     * To initialize the game client sends its name and receives the deck from the master server
     * @param message receives 1 and his or her own deck to play the game
     * @return sends 0 and clients name to the server
     */

    public String sendForInit(String message)
    {
        this.name=message;
        String[] response = new String[2];
        try
        {
            message="0-"+message;
            os.println(message);
            os.flush();
            response =is.readLine().split("-");
            if (response[0].compareTo("1")==0){
                String[] values = response[1].split(",");
                ArrayList list = new ArrayList(Arrays.asList(values));
                this.deck=list;
            } else response[1]="Opps, something went wrong";
        }
        catch(IOException e)
        {
            e.printStackTrace();
            System.out.println("ConnectionToServer. Socket read Error");
        }
        return response[1];
    }

	/**
     * cuts the connection of client to the server by closing input stream, output stream and socket
     */
	
    public void Disconnect()
    {
        try
        {
            is.close();
            os.close();
            s.close();
            System.out.println("ConnectionToServer. Connection Closed");
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }
}
